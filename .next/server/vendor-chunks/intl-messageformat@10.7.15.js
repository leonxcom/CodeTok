"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/intl-messageformat@10.7.15";
exports.ids = ["vendor-chunks/intl-messageformat@10.7.15"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.ErrorCode),\n/* harmony export */   FormatError: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.FormatError),\n/* harmony export */   IntlMessageFormat: () => (/* reexport safe */ _src_core__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat),\n/* harmony export */   InvalidValueError: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.InvalidValueError),\n/* harmony export */   InvalidValueTypeError: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.InvalidValueTypeError),\n/* harmony export */   MissingValueError: () => (/* reexport safe */ _src_error__WEBPACK_IMPORTED_MODULE_0__.MissingValueError),\n/* harmony export */   PART_TYPE: () => (/* reexport safe */ _src_formatters__WEBPACK_IMPORTED_MODULE_1__.PART_TYPE),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   formatToParts: () => (/* reexport safe */ _src_formatters__WEBPACK_IMPORTED_MODULE_1__.formatToParts),\n/* harmony export */   isFormatXMLElementFn: () => (/* reexport safe */ _src_formatters__WEBPACK_IMPORTED_MODULE_1__.isFormatXMLElementFn)\n/* harmony export */ });\n/* harmony import */ var _src_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/core */ \"(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/core.js\");\n/* harmony import */ var _src_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/error */ \"(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/error.js\");\n/* harmony import */ var _src_formatters__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/formatters */ \"(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/formatters.js\");\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/ \n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_src_core__WEBPACK_IMPORTED_MODULE_2__.IntlMessageFormat);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vaW50bC1tZXNzYWdlZm9ybWF0QDEwLjcuMTUvbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBSUEsR0FDK0M7QUFDcEI7QUFDQztBQUNLO0FBQ0o7QUFDN0IsaUVBQWVBLHdEQUFpQkEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25vc3R1ZHktYWkvLi9ub2RlX21vZHVsZXMvLnBucG0vaW50bC1tZXNzYWdlZm9ybWF0QDEwLjcuMTUvbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC9saWIvaW5kZXguanM/NmUxNSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuQ29weXJpZ2h0IChjKSAyMDE0LCBZYWhvbyEgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLlxuU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiovXG5pbXBvcnQgeyBJbnRsTWVzc2FnZUZvcm1hdCB9IGZyb20gJy4vc3JjL2NvcmUnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvY29yZSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9lcnJvcic7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9mb3JtYXR0ZXJzJztcbmV4cG9ydCB7IEludGxNZXNzYWdlRm9ybWF0IH07XG5leHBvcnQgZGVmYXVsdCBJbnRsTWVzc2FnZUZvcm1hdDtcbiJdLCJuYW1lcyI6WyJJbnRsTWVzc2FnZUZvcm1hdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/core.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/core.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IntlMessageFormat: () => (/* binding */ IntlMessageFormat)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/fast-memoize */ \"(rsc)/./node_modules/.pnpm/@formatjs+fast-memoize@2.2.6/node_modules/@formatjs/fast-memoize/lib/index.js\");\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(rsc)/./node_modules/.pnpm/@formatjs+icu-messageformat-parser@2.11.1/node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _formatters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./formatters */ \"(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/formatters.js\");\n/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/ \n\n\n\n// -- MessageFormat --------------------------------------------------------\nfunction mergeConfig(c1, c2) {\n    if (!c2) {\n        return c1;\n    }\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function(all, k) {\n        all[k] = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, c1[k]), c2[k] || {});\n        return all;\n    }, {}));\n}\nfunction mergeConfigs(defaultConfig, configs) {\n    if (!configs) {\n        return defaultConfig;\n    }\n    return Object.keys(defaultConfig).reduce(function(all, k) {\n        all[k] = mergeConfig(defaultConfig[k], configs[k]);\n        return all;\n    }, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, defaultConfig));\n}\nfunction createFastMemoizeCache(store) {\n    return {\n        create: function() {\n            return {\n                get: function(key) {\n                    return store[key];\n                },\n                set: function(key, value) {\n                    store[key] = value;\n                }\n            };\n        }\n    };\n}\nfunction createDefaultFormatters(cache) {\n    if (cache === void 0) {\n        cache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {}\n        };\n    }\n    return {\n        getNumberFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function() {\n            var _a;\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.NumberFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                void 0\n            ], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.number),\n            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n        }),\n        getDateTimeFormat: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function() {\n            var _a;\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.DateTimeFormat).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                void 0\n            ], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.dateTime),\n            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n        }),\n        getPluralRules: (0,_formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.memoize)(function() {\n            var _a;\n            var args = [];\n            for(var _i = 0; _i < arguments.length; _i++){\n                args[_i] = arguments[_i];\n            }\n            return new ((_a = Intl.PluralRules).bind.apply(_a, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([\n                void 0\n            ], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.pluralRules),\n            strategy: _formatjs_fast_memoize__WEBPACK_IMPORTED_MODULE_0__.strategies.variadic\n        })\n    };\n}\nvar IntlMessageFormat = /** @class */ function() {\n    function IntlMessageFormat(message, locales, overrideFormats, opts) {\n        if (locales === void 0) {\n            locales = IntlMessageFormat.defaultLocale;\n        }\n        var _this = this;\n        this.formatterCache = {\n            number: {},\n            dateTime: {},\n            pluralRules: {}\n        };\n        this.format = function(values) {\n            var parts = _this.formatToParts(values);\n            // Hot path for straight simple msg translations\n            if (parts.length === 1) {\n                return parts[0].value;\n            }\n            var result = parts.reduce(function(all, part) {\n                if (!all.length || part.type !== _formatters__WEBPACK_IMPORTED_MODULE_3__.PART_TYPE.literal || typeof all[all.length - 1] !== \"string\") {\n                    all.push(part.value);\n                } else {\n                    all[all.length - 1] += part.value;\n                }\n                return all;\n            }, []);\n            if (result.length <= 1) {\n                return result[0] || \"\";\n            }\n            return result;\n        };\n        this.formatToParts = function(values) {\n            return (0,_formatters__WEBPACK_IMPORTED_MODULE_3__.formatToParts)(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);\n        };\n        this.resolvedOptions = function() {\n            var _a;\n            return {\n                locale: ((_a = _this.resolvedLocale) === null || _a === void 0 ? void 0 : _a.toString()) || Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]\n            };\n        };\n        this.getAst = function() {\n            return _this.ast;\n        };\n        // Defined first because it's used to build the format pattern.\n        this.locales = locales;\n        this.resolvedLocale = IntlMessageFormat.resolveLocale(locales);\n        if (typeof message === \"string\") {\n            this.message = message;\n            if (!IntlMessageFormat.__parse) {\n                throw new TypeError(\"IntlMessageFormat.__parse must be set to process `message` of type `string`\");\n            }\n            var _a = opts || {}, formatters = _a.formatters, parseOpts = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, [\n                \"formatters\"\n            ]);\n            // Parse string messages into an AST.\n            this.ast = IntlMessageFormat.__parse(message, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parseOpts), {\n                locale: this.resolvedLocale\n            }));\n        } else {\n            this.ast = message;\n        }\n        if (!Array.isArray(this.ast)) {\n            throw new TypeError(\"A message must be provided as a String or AST.\");\n        }\n        // Creates a new object with the specified `formats` merged with the default\n        // formats.\n        this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats);\n        this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);\n    }\n    Object.defineProperty(IntlMessageFormat, \"defaultLocale\", {\n        get: function() {\n            if (!IntlMessageFormat.memoizedDefaultLocale) {\n                IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;\n            }\n            return IntlMessageFormat.memoizedDefaultLocale;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IntlMessageFormat.memoizedDefaultLocale = null;\n    IntlMessageFormat.resolveLocale = function(locales) {\n        if (typeof Intl.Locale === \"undefined\") {\n            return;\n        }\n        var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);\n        if (supportedLocales.length > 0) {\n            return new Intl.Locale(supportedLocales[0]);\n        }\n        return new Intl.Locale(typeof locales === \"string\" ? locales : locales[0]);\n    };\n    IntlMessageFormat.__parse = _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_1__.parse;\n    // Default format options used as the prototype of the `formats` provided to the\n    // constructor. These are used when constructing the internal Intl.NumberFormat\n    // and Intl.DateTimeFormat instances.\n    IntlMessageFormat.formats = {\n        number: {\n            integer: {\n                maximumFractionDigits: 0\n            },\n            currency: {\n                style: \"currency\"\n            },\n            percent: {\n                style: \"percent\"\n            }\n        },\n        date: {\n            short: {\n                month: \"numeric\",\n                day: \"numeric\",\n                year: \"2-digit\"\n            },\n            medium: {\n                month: \"short\",\n                day: \"numeric\",\n                year: \"numeric\"\n            },\n            long: {\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\"\n            },\n            full: {\n                weekday: \"long\",\n                month: \"long\",\n                day: \"numeric\",\n                year: \"numeric\"\n            }\n        },\n        time: {\n            short: {\n                hour: \"numeric\",\n                minute: \"numeric\"\n            },\n            medium: {\n                hour: \"numeric\",\n                minute: \"numeric\",\n                second: \"numeric\"\n            },\n            long: {\n                hour: \"numeric\",\n                minute: \"numeric\",\n                second: \"numeric\",\n                timeZoneName: \"short\"\n            },\n            full: {\n                hour: \"numeric\",\n                minute: \"numeric\",\n                second: \"numeric\",\n                timeZoneName: \"short\"\n            }\n        }\n    };\n    return IntlMessageFormat;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/error.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/error.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   FormatError: () => (/* binding */ FormatError),\n/* harmony export */   InvalidValueError: () => (/* binding */ InvalidValueError),\n/* harmony export */   InvalidValueTypeError: () => (/* binding */ InvalidValueTypeError),\n/* harmony export */   MissingValueError: () => (/* binding */ MissingValueError)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs\");\n\nvar ErrorCode;\n(function(ErrorCode) {\n    // When we have a placeholder but no value to format\n    ErrorCode[\"MISSING_VALUE\"] = \"MISSING_VALUE\";\n    // When value supplied is invalid\n    ErrorCode[\"INVALID_VALUE\"] = \"INVALID_VALUE\";\n    // When we need specific Intl API but it's not available\n    ErrorCode[\"MISSING_INTL_API\"] = \"MISSING_INTL_API\";\n})(ErrorCode || (ErrorCode = {}));\nvar FormatError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(FormatError, _super);\n    function FormatError(msg, code, originalMessage) {\n        var _this = _super.call(this, msg) || this;\n        _this.code = code;\n        _this.originalMessage = originalMessage;\n        return _this;\n    }\n    FormatError.prototype.toString = function() {\n        return \"[formatjs Error: \".concat(this.code, \"] \").concat(this.message);\n    };\n    return FormatError;\n}(Error);\n\nvar InvalidValueError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueError, _super);\n    function InvalidValueError(variableId, value, options, originalMessage) {\n        return _super.call(this, 'Invalid values for \"'.concat(variableId, '\": \"').concat(value, '\". Options are \"').concat(Object.keys(options).join('\", \"'), '\"'), ErrorCode.INVALID_VALUE, originalMessage) || this;\n    }\n    return InvalidValueError;\n}(FormatError);\n\nvar InvalidValueTypeError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvalidValueTypeError, _super);\n    function InvalidValueTypeError(value, type, originalMessage) {\n        return _super.call(this, 'Value for \"'.concat(value, '\" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;\n    }\n    return InvalidValueTypeError;\n}(FormatError);\n\nvar MissingValueError = /** @class */ function(_super) {\n    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingValueError, _super);\n    function MissingValueError(variableId, originalMessage) {\n        return _super.call(this, 'The intl string context variable \"'.concat(variableId, '\" was not provided to the string \"').concat(originalMessage, '\"'), ErrorCode.MISSING_VALUE, originalMessage) || this;\n    }\n    return MissingValueError;\n}(FormatError);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vaW50bC1tZXNzYWdlZm9ybWF0QDEwLjcuMTUvbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC9saWIvc3JjL2Vycm9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFrQztBQUMzQixJQUFJQyxVQUFVO0FBQ3BCLFVBQVVBLFNBQVM7SUFDaEIsb0RBQW9EO0lBQ3BEQSxTQUFTLENBQUMsZ0JBQWdCLEdBQUc7SUFDN0IsaUNBQWlDO0lBQ2pDQSxTQUFTLENBQUMsZ0JBQWdCLEdBQUc7SUFDN0Isd0RBQXdEO0lBQ3hEQSxTQUFTLENBQUMsbUJBQW1CLEdBQUc7QUFDcEMsR0FBR0EsYUFBY0EsQ0FBQUEsWUFBWSxDQUFDO0FBQzlCLElBQUlDLGNBQWMsV0FBVyxHQUFJLFNBQVVDLE1BQU07SUFDN0NILGdEQUFTQSxDQUFDRSxhQUFhQztJQUN2QixTQUFTRCxZQUFZRSxHQUFHLEVBQUVDLElBQUksRUFBRUMsZUFBZTtRQUMzQyxJQUFJQyxRQUFRSixPQUFPSyxJQUFJLENBQUMsSUFBSSxFQUFFSixRQUFRLElBQUk7UUFDMUNHLE1BQU1GLElBQUksR0FBR0E7UUFDYkUsTUFBTUQsZUFBZSxHQUFHQTtRQUN4QixPQUFPQztJQUNYO0lBQ0FMLFlBQVlPLFNBQVMsQ0FBQ0MsUUFBUSxHQUFHO1FBQzdCLE9BQU8sb0JBQW9CQyxNQUFNLENBQUMsSUFBSSxDQUFDTixJQUFJLEVBQUUsTUFBTU0sTUFBTSxDQUFDLElBQUksQ0FBQ0MsT0FBTztJQUMxRTtJQUNBLE9BQU9WO0FBQ1gsRUFBRVc7QUFDcUI7QUFDdkIsSUFBSUMsb0JBQW9CLFdBQVcsR0FBSSxTQUFVWCxNQUFNO0lBQ25ESCxnREFBU0EsQ0FBQ2MsbUJBQW1CWDtJQUM3QixTQUFTVyxrQkFBa0JDLFVBQVUsRUFBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUVYLGVBQWU7UUFDbEUsT0FBT0gsT0FBT0ssSUFBSSxDQUFDLElBQUksRUFBRSx1QkFBd0JHLE1BQU0sQ0FBQ0ksWUFBWSxRQUFVSixNQUFNLENBQUNLLE9BQU8sb0JBQXNCTCxNQUFNLENBQUNPLE9BQU9DLElBQUksQ0FBQ0YsU0FBU0csSUFBSSxDQUFDLFNBQVMsTUFBT25CLFVBQVVvQixhQUFhLEVBQUVmLG9CQUFvQixJQUFJO0lBQ3hOO0lBQ0EsT0FBT1E7QUFDWCxFQUFFWjtBQUMyQjtBQUM3QixJQUFJb0Isd0JBQXdCLFdBQVcsR0FBSSxTQUFVbkIsTUFBTTtJQUN2REgsZ0RBQVNBLENBQUNzQix1QkFBdUJuQjtJQUNqQyxTQUFTbUIsc0JBQXNCTixLQUFLLEVBQUVPLElBQUksRUFBRWpCLGVBQWU7UUFDdkQsT0FBT0gsT0FBT0ssSUFBSSxDQUFDLElBQUksRUFBRSxjQUFlRyxNQUFNLENBQUNLLE9BQU8sc0JBQXVCTCxNQUFNLENBQUNZLE9BQU90QixVQUFVb0IsYUFBYSxFQUFFZixvQkFBb0IsSUFBSTtJQUNoSjtJQUNBLE9BQU9nQjtBQUNYLEVBQUVwQjtBQUMrQjtBQUNqQyxJQUFJc0Isb0JBQW9CLFdBQVcsR0FBSSxTQUFVckIsTUFBTTtJQUNuREgsZ0RBQVNBLENBQUN3QixtQkFBbUJyQjtJQUM3QixTQUFTcUIsa0JBQWtCVCxVQUFVLEVBQUVULGVBQWU7UUFDbEQsT0FBT0gsT0FBT0ssSUFBSSxDQUFDLElBQUksRUFBRSxxQ0FBc0NHLE1BQU0sQ0FBQ0ksWUFBWSxzQ0FBd0NKLE1BQU0sQ0FBQ0wsaUJBQWlCLE1BQU9MLFVBQVV3QixhQUFhLEVBQUVuQixvQkFBb0IsSUFBSTtJQUM5TTtJQUNBLE9BQU9rQjtBQUNYLEVBQUV0QjtBQUMyQiIsInNvdXJjZXMiOlsid2VicGFjazovL25vc3R1ZHktYWkvLi9ub2RlX21vZHVsZXMvLnBucG0vaW50bC1tZXNzYWdlZm9ybWF0QDEwLjcuMTUvbm9kZV9tb2R1bGVzL2ludGwtbWVzc2FnZWZvcm1hdC9saWIvc3JjL2Vycm9yLmpzPzkzMGYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIEVycm9yQ29kZTtcbihmdW5jdGlvbiAoRXJyb3JDb2RlKSB7XG4gICAgLy8gV2hlbiB3ZSBoYXZlIGEgcGxhY2Vob2xkZXIgYnV0IG5vIHZhbHVlIHRvIGZvcm1hdFxuICAgIEVycm9yQ29kZVtcIk1JU1NJTkdfVkFMVUVcIl0gPSBcIk1JU1NJTkdfVkFMVUVcIjtcbiAgICAvLyBXaGVuIHZhbHVlIHN1cHBsaWVkIGlzIGludmFsaWRcbiAgICBFcnJvckNvZGVbXCJJTlZBTElEX1ZBTFVFXCJdID0gXCJJTlZBTElEX1ZBTFVFXCI7XG4gICAgLy8gV2hlbiB3ZSBuZWVkIHNwZWNpZmljIEludGwgQVBJIGJ1dCBpdCdzIG5vdCBhdmFpbGFibGVcbiAgICBFcnJvckNvZGVbXCJNSVNTSU5HX0lOVExfQVBJXCJdID0gXCJNSVNTSU5HX0lOVExfQVBJXCI7XG59KShFcnJvckNvZGUgfHwgKEVycm9yQ29kZSA9IHt9KSk7XG52YXIgRm9ybWF0RXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEZvcm1hdEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZvcm1hdEVycm9yKG1zZywgY29kZSwgb3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1zZykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIF90aGlzLm9yaWdpbmFsTWVzc2FnZSA9IG9yaWdpbmFsTWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBGb3JtYXRFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIltmb3JtYXRqcyBFcnJvcjogXCIuY29uY2F0KHRoaXMuY29kZSwgXCJdIFwiKS5jb25jYXQodGhpcy5tZXNzYWdlKTtcbiAgICB9O1xuICAgIHJldHVybiBGb3JtYXRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEZvcm1hdEVycm9yIH07XG52YXIgSW52YWxpZFZhbHVlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEludmFsaWRWYWx1ZUVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEludmFsaWRWYWx1ZUVycm9yKHZhcmlhYmxlSWQsIHZhbHVlLCBvcHRpb25zLCBvcmlnaW5hbE1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIFwiSW52YWxpZCB2YWx1ZXMgZm9yIFxcXCJcIi5jb25jYXQodmFyaWFibGVJZCwgXCJcXFwiOiBcXFwiXCIpLmNvbmNhdCh2YWx1ZSwgXCJcXFwiLiBPcHRpb25zIGFyZSBcXFwiXCIpLmNvbmNhdChPYmplY3Qua2V5cyhvcHRpb25zKS5qb2luKCdcIiwgXCInKSwgXCJcXFwiXCIpLCBFcnJvckNvZGUuSU5WQUxJRF9WQUxVRSwgb3JpZ2luYWxNZXNzYWdlKSB8fCB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSW52YWxpZFZhbHVlRXJyb3I7XG59KEZvcm1hdEVycm9yKSk7XG5leHBvcnQgeyBJbnZhbGlkVmFsdWVFcnJvciB9O1xudmFyIEludmFsaWRWYWx1ZVR5cGVFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW52YWxpZFZhbHVlVHlwZUVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEludmFsaWRWYWx1ZVR5cGVFcnJvcih2YWx1ZSwgdHlwZSwgb3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcIlZhbHVlIGZvciBcXFwiXCIuY29uY2F0KHZhbHVlLCBcIlxcXCIgbXVzdCBiZSBvZiB0eXBlIFwiKS5jb25jYXQodHlwZSksIEVycm9yQ29kZS5JTlZBTElEX1ZBTFVFLCBvcmlnaW5hbE1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBJbnZhbGlkVmFsdWVUeXBlRXJyb3I7XG59KEZvcm1hdEVycm9yKSk7XG5leHBvcnQgeyBJbnZhbGlkVmFsdWVUeXBlRXJyb3IgfTtcbnZhciBNaXNzaW5nVmFsdWVFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWlzc2luZ1ZhbHVlRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWlzc2luZ1ZhbHVlRXJyb3IodmFyaWFibGVJZCwgb3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBcIlRoZSBpbnRsIHN0cmluZyBjb250ZXh0IHZhcmlhYmxlIFxcXCJcIi5jb25jYXQodmFyaWFibGVJZCwgXCJcXFwiIHdhcyBub3QgcHJvdmlkZWQgdG8gdGhlIHN0cmluZyBcXFwiXCIpLmNvbmNhdChvcmlnaW5hbE1lc3NhZ2UsIFwiXFxcIlwiKSwgRXJyb3JDb2RlLk1JU1NJTkdfVkFMVUUsIG9yaWdpbmFsTWVzc2FnZSkgfHwgdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIE1pc3NpbmdWYWx1ZUVycm9yO1xufShGb3JtYXRFcnJvcikpO1xuZXhwb3J0IHsgTWlzc2luZ1ZhbHVlRXJyb3IgfTtcbiJdLCJuYW1lcyI6WyJfX2V4dGVuZHMiLCJFcnJvckNvZGUiLCJGb3JtYXRFcnJvciIsIl9zdXBlciIsIm1zZyIsImNvZGUiLCJvcmlnaW5hbE1lc3NhZ2UiLCJfdGhpcyIsImNhbGwiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNvbmNhdCIsIm1lc3NhZ2UiLCJFcnJvciIsIkludmFsaWRWYWx1ZUVycm9yIiwidmFyaWFibGVJZCIsInZhbHVlIiwib3B0aW9ucyIsIk9iamVjdCIsImtleXMiLCJqb2luIiwiSU5WQUxJRF9WQUxVRSIsIkludmFsaWRWYWx1ZVR5cGVFcnJvciIsInR5cGUiLCJNaXNzaW5nVmFsdWVFcnJvciIsIk1JU1NJTkdfVkFMVUUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/formatters.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/formatters.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PART_TYPE: () => (/* binding */ PART_TYPE),\n/* harmony export */   formatToParts: () => (/* binding */ formatToParts),\n/* harmony export */   isFormatXMLElementFn: () => (/* binding */ isFormatXMLElementFn)\n/* harmony export */ });\n/* harmony import */ var _formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @formatjs/icu-messageformat-parser */ \"(rsc)/./node_modules/.pnpm/@formatjs+icu-messageformat-parser@2.11.1/node_modules/@formatjs/icu-messageformat-parser/lib/index.js\");\n/* harmony import */ var _error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error */ \"(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/error.js\");\n\n\nvar PART_TYPE;\n(function(PART_TYPE) {\n    PART_TYPE[PART_TYPE[\"literal\"] = 0] = \"literal\";\n    PART_TYPE[PART_TYPE[\"object\"] = 1] = \"object\";\n})(PART_TYPE || (PART_TYPE = {}));\nfunction mergeLiteral(parts) {\n    if (parts.length < 2) {\n        return parts;\n    }\n    return parts.reduce(function(all, part) {\n        var lastPart = all[all.length - 1];\n        if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {\n            all.push(part);\n        } else {\n            lastPart.value += part.value;\n        }\n        return all;\n    }, []);\n}\nfunction isFormatXMLElementFn(el) {\n    return typeof el === \"function\";\n}\n// TODO(skeleton): add skeleton support\nfunction formatToParts(els, locales, formatters, formats, values, currentPluralValue, // For debugging\noriginalMessage) {\n    // Hot path for straight simple msg translations\n    if (els.length === 1 && (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(els[0])) {\n        return [\n            {\n                type: PART_TYPE.literal,\n                value: els[0].value\n            }\n        ];\n    }\n    var result = [];\n    for(var _i = 0, els_1 = els; _i < els_1.length; _i++){\n        var el = els_1[_i];\n        // Exit early for string parts.\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isLiteralElement)(el)) {\n            result.push({\n                type: PART_TYPE.literal,\n                value: el.value\n            });\n            continue;\n        }\n        // TODO: should this part be literal type?\n        // Replace `#` in plural rules with the actual numeric value.\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPoundElement)(el)) {\n            if (typeof currentPluralValue === \"number\") {\n                result.push({\n                    type: PART_TYPE.literal,\n                    value: formatters.getNumberFormat(locales).format(currentPluralValue)\n                });\n            }\n            continue;\n        }\n        var varName = el.value;\n        // Enforce that all required values are provided by the caller.\n        if (!(values && varName in values)) {\n            throw new _error__WEBPACK_IMPORTED_MODULE_1__.MissingValueError(varName, originalMessage);\n        }\n        var value = values[varName];\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isArgumentElement)(el)) {\n            if (!value || typeof value === \"string\" || typeof value === \"number\") {\n                value = typeof value === \"string\" || typeof value === \"number\" ? String(value) : \"\";\n            }\n            result.push({\n                type: typeof value === \"string\" ? PART_TYPE.literal : PART_TYPE.object,\n                value: value\n            });\n            continue;\n        }\n        // Recursively format plural and select parts' option — which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateElement)(el)) {\n            var style = typeof el.style === \"string\" ? formats.date[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n            result.push({\n                type: PART_TYPE.literal,\n                value: formatters.getDateTimeFormat(locales, style).format(value)\n            });\n            continue;\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTimeElement)(el)) {\n            var style = typeof el.style === \"string\" ? formats.time[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isDateTimeSkeleton)(el.style) ? el.style.parsedOptions : formats.time.medium;\n            result.push({\n                type: PART_TYPE.literal,\n                value: formatters.getDateTimeFormat(locales, style).format(value)\n            });\n            continue;\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberElement)(el)) {\n            var style = typeof el.style === \"string\" ? formats.number[el.style] : (0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isNumberSkeleton)(el.style) ? el.style.parsedOptions : undefined;\n            if (style && style.scale) {\n                value = value * (style.scale || 1);\n            }\n            result.push({\n                type: PART_TYPE.literal,\n                value: formatters.getNumberFormat(locales, style).format(value)\n            });\n            continue;\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isTagElement)(el)) {\n            var children = el.children, value_1 = el.value;\n            var formatFn = values[value_1];\n            if (!isFormatXMLElementFn(formatFn)) {\n                throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueTypeError(value_1, \"function\", originalMessage);\n            }\n            var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);\n            var chunks = formatFn(parts.map(function(p) {\n                return p.value;\n            }));\n            if (!Array.isArray(chunks)) {\n                chunks = [\n                    chunks\n                ];\n            }\n            result.push.apply(result, chunks.map(function(c) {\n                return {\n                    type: typeof c === \"string\" ? PART_TYPE.literal : PART_TYPE.object,\n                    value: c\n                };\n            }));\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isSelectElement)(el)) {\n            var opt = el.options[value] || el.options.other;\n            if (!opt) {\n                throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));\n            continue;\n        }\n        if ((0,_formatjs_icu_messageformat_parser__WEBPACK_IMPORTED_MODULE_0__.isPluralElement)(el)) {\n            var opt = el.options[\"=\".concat(value)];\n            if (!opt) {\n                if (!Intl.PluralRules) {\n                    throw new _error__WEBPACK_IMPORTED_MODULE_1__.FormatError('Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\\n', _error__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.MISSING_INTL_API, originalMessage);\n                }\n                var rule = formatters.getPluralRules(locales, {\n                    type: el.pluralType\n                }).select(value - (el.offset || 0));\n                opt = el.options[rule] || el.options.other;\n            }\n            if (!opt) {\n                throw new _error__WEBPACK_IMPORTED_MODULE_1__.InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);\n            }\n            result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));\n            continue;\n        }\n    }\n    return mergeLiteral(result);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/intl-messageformat@10.7.15/node_modules/intl-messageformat/lib/src/formatters.js\n");

/***/ })

};
;